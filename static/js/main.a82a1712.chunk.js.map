{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["keyboardKeys","id","className","value","Result","handleChange","e","element","target","console","log","printOutput","printHistory","output","reverseNumberFormat","getOutput","toString","substr","length","history","getHistory","result","eval","KeyboardButton","map","item","onClick","Keyboard","Calculator","document","getElementById","innerText","num","getFormatedNum","Number","toLocaleString","replace","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a82a1712.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./calculatorStyle.css\";\r\n\r\nconst keyboardKeys = [\r\n  {id: \"clear\", className: 'operator', value: 'C'},\r\n  {id: \"backspace\", className: 'operator', value: 'CE'},\r\n  {id: \"%\", className: 'operator', value: '%'},\r\n  {id: \"/\", className: 'operator', value: '/'},\r\n  {id: \"7\", className: 'number', value: '7'},\r\n  {id: \"8\", className: 'number', value: '8'},\r\n  {id: \"9\", className: 'number', value: '9'},\r\n  {id: \"*\", className: 'operator', value: '*'},\r\n  {id: \"4\", className: 'number', value: '4'},\r\n  {id: \"5\", className: 'number', value: '5'},\r\n  {id: \"6\", className: 'number', value: '6'},\r\n  {id: \"+\", className: 'operator', value: '+'},\r\n  {id: \"1\", className: 'number', value: '1'},\r\n  {id: \"2\", className: 'number', value: '2'},\r\n  {id: \"3\", className: 'number', value: '3'},\r\n  {id: \"-\", className: 'operator', value: '-'},\r\n  {id: \"empty\", className: 'empty', value: ''},\r\n  {id: \"0\", className: 'number', value: '0'},\r\n  {id: \"empty\", className: 'empty', value: ''},\r\n  {id: \"=\", className: 'operator', value: '='},\r\n];\r\n\r\nfunction Result(){\r\n  return(\r\n    <div id=\"result\">\r\n      <div id=\"history\">\r\n        <p id=\"history-value\"></p>\r\n      </div>\r\n      <div id=\"output\">\r\n        <p id=\"output-value\"></p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction handleChange(e){\r\n  var element = e.target;\r\n  console.log(element.id)\r\n \r\n  if(e.target.className===\"operator\"){\r\n\t\tif(element.id===\"clear\"){ console.log(\"clear\")\r\n\t\t\tprintOutput(\"\");\r\n\t\t\tprintHistory(\"\");\r\n\t\t}\r\n\t\telse if(element.id===\"backspace\"){\r\n\t\t\tvar output = reverseNumberFormat(getOutput()).toString();\r\n\t\t\tif (output){\r\n\t\t\t\toutput = output.substr(0,output.length-1);\r\n\t\t\t\tprintOutput(output);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse{\r\n\t\t\tvar output = getOutput();\r\n\t\t\tvar history = getHistory();\r\n\t\t\tif(output!==\"\"){\r\n\t\t\t\toutput=reverseNumberFormat(output);\r\n\t\t\t\thistory=history+output;\r\n\t\t\t\tif(element.id==='='){\r\n\t\t\t\t\tvar result = eval(history);\r\n\t\t\t\t\tprintOutput(result);\r\n\t\t\t\t\tprintHistory(\"\");\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\thistory=history+element.id;\r\n\t\t\t\t\tprintOutput(\"\");\r\n\t\t\t\t\tprintHistory(history);\r\n\t\t\t\t}\r\n      }\r\n    }\r\n  }else if(e.target.className===\"number\"){\r\n    var output = reverseNumberFormat(getOutput());\r\n    output=output+element.id;\r\n    printOutput(output);\r\n  }else{\r\n\r\n  }\r\n}\r\n\r\nfunction KeyboardButton(){\r\n  return(\r\n    keyboardKeys.map((item)=>\r\n      <button className={item.className} onClick={handleChange} id={item.id}>{item.value}</button>\r\n    )\r\n  );\r\n}\r\n\r\nfunction Keyboard(){\r\n  return(\r\n    <div id=\"keyboard\">\r\n      <KeyboardButton/>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Calculator(){\r\n  return (\r\n    <div id=\"calculator\">\r\n      <Result />\r\n      <Keyboard />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction getHistory(){\r\n\treturn document.getElementById(\"history-value\").innerText;\r\n}\r\nfunction printHistory(num){\r\n\tdocument.getElementById(\"history-value\").innerText=num;\r\n}\r\nfunction getOutput(){\r\n\treturn document.getElementById(\"output-value\").innerText; \r\n}\r\nfunction printOutput(num){\r\n  if(num===\"\"){\r\n    document.getElementById(\"output-value\").innerText=num;\t\r\n\t}\r\n\telse{\r\n\t\tdocument.getElementById(\"output-value\").innerText=getFormatedNum(num);\r\n\t}\r\n}\r\nfunction getFormatedNum(num){\r\n\tif(num===\"-\"){\r\n\t\treturn \"\";\r\n\t}\r\n\tvar n = Number(num);\r\n\tvar value = n.toLocaleString(\"en\");\r\n\treturn value;\r\n}\r\nfunction reverseNumberFormat(num){\r\n\treturn Number(num.replace(/,/g,''));\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <Calculator />\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}